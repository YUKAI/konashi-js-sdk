$(function(){
  var numBalls=3;

  // Find button
  $("#btn-find").on("tap", function(){
    if($("#btn-find").hasClass("find")){
      k.find();
    } else {
      k.disconnect();
      numBalls=3;
      // change find button
      $("#btn-find").addClass("find").html("Find konashi");
    }
  });

  k.ready(function(){
    // change find button
    $("#btn-find").removeClass("find").html("Disconnect konashi");
    var p=new Processing(canvas,sketch);
  });

  k.updatePioInput(function(value){
    if(value%2){
      numBalls++;
    }
  });

  // this code was autogenerated from PJS
  var sketch=(function($p) {
    var Ball = (function() {
      function Ball() {
        var $this_1 = this;
        function $superCstr() {
          $p.extendClassChain($this_1)
        }
        $this_1.x = 0;
        $this_1.y = 0;
        $this_1.diameter = 0;
        $this_1.vx = 0;
        $this_1.vy = 0;
        $this_1.id = 0;
        $this_1.others = null;

        function collide$0() {
          for (var i = $this_1.id + 1; i < numBalls; i++) {
            var dx = $this_1.others[i].x - $this_1.x;
            var dy = $this_1.others[i].y - $this_1.y;
            var distance = $p.sqrt(dx * dx + dy * dy);
            var minDist = $this_1.others[i].diameter / 2 + $this_1.diameter / 2;
            if (distance < minDist) {
              var angle = $p.atan2(dy, dx);
              var targetX = $this_1.x + $p.cos(angle) * minDist;
              var targetY = $this_1.y + $p.sin(angle) * minDist;
              var ax = (targetX - $this_1.others[i].x) * spring;
              var ay = (targetY - $this_1.others[i].y) * spring;
              $this_1.vx -= ax;
              $this_1.vy -= ay;
              $this_1.others[i].vx += ax;
              $this_1.others[i].vy += ay;
            }
          }
        }
        $p.addMethod($this_1, 'collide', collide$0);

        function move$0() {
          $this_1.vy += gravity;
          $this_1.x += $this_1.vx;
          $this_1.y += $this_1.vy;
          if ($this_1.x + $this_1.diameter / 2 > $p.width) {
            $this_1.x = $p.width - $this_1.diameter / 2;
            $this_1.vx += -0.9;
          }
          else if ($this_1.x - $this_1.diameter / 2 < 0) {
            $this_1.x = $this_1.diameter / 2;
            $this_1.vx *= -0.9;
          }
          if ($this_1.y + $this_1.diameter / 2 > $p.height) {
            $this_1.y = $p.height - $this_1.diameter / 2;
            $this_1.vy *= -0.9;
          }
          else if ($this_1.y - $this_1.diameter / 2 < 0) {
            $this_1.y = $this_1.diameter / 2;
            $this_1.vy *= -0.9;
          }
        }
        $p.addMethod($this_1, 'move', move$0);

        function display$0() {
          $p.fill(255, 204);
          $p.ellipse($this_1.x, $this_1.y, $this_1.diameter, $this_1.diameter);
        }
        $p.addMethod($this_1, 'display', display$0);

        function $constr_5(xin, yin, din, idin, oin) {
          $superCstr();
          $this_1.x = xin;
          $this_1.y = yin;
          $this_1.diameter = din;
          $this_1.id = idin;
          $this_1.others = oin;
        }

        function $constr() {
          if (arguments.length === 5) {
            $constr_5.apply($this_1, arguments);
          } else $superCstr();
        }
        $constr.apply(null, arguments);
      }
      return Ball;
    })();
    $p.Ball = Ball;

    var oldnumBalls;
    var spring = 0.05;
    var gravity = 0.03;
    var balls = $p.createJavaArray('Ball', [numBalls]);

    function setup() {
      $p.size(300, 240);
      $p.noStroke();
      $p.smooth();
      oldnumBalls=numBalls;
      for (var i = 0; i < numBalls; i++) {
        balls[i] = new Ball($p.random($p.width), $p.random($p.height), $p.random(20, 40), i, balls);
      }
    }
    $p.setup = setup;

    function draw() {
      $p.background(0);
      if(oldnumBalls<numBalls){
        for(var i = oldnumBalls; i < numBalls; i++){
          balls=$p.append(balls,new Ball($p.random($p.width), $p.random($p.height), $p.random(20, 40), i, balls));
        }
      }
      for (var i = 0; i < numBalls; i++) {
        balls[i].collide();
        balls[i].move();
        balls[i].display();
      }
      oldnumBalls=numBalls;
    }
    $p.draw = draw;

  });
  var canvas=$("canvas").get(0);

  //k.showDebugLog();
});
